{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","style","color","onClose","e","className","placeholder","todo","value","onChange","event","target","Button","onClick","collection","doc","id","set","merge","disabled","List","ListItem","ListItemAvatar","ListItemText","primary","secondary","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kVAaMA,EAXcC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAGMC,Y,uFCEjBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,SAAU,WACVC,MAAO,IACPC,gBAAiBJ,EAAMK,QAAQC,WAAWL,MAC1CM,OAAQ,iBACRC,UAAWR,EAAMS,QAAQ,GACzBC,QAASV,EAAMW,QAAQ,EAAG,EAAG,QAgElBC,MA5Df,SAAcC,GACZ,IAAMC,EAAUhB,IADG,EAEKiB,oBAAS,GAFd,mBAEZC,EAFY,KAENC,EAFM,OAGOF,qBAHP,mBAGZG,EAHY,KAGLC,EAHK,KAuBnB,OACE,oCACE,kBAACC,EAAA,EAAD,CACEC,MAAO,CAAEC,MAAO,WAChBN,KAAMA,EACNO,QAAS,SAACC,GAAD,OAAOP,GAAQ,KAExB,yBAAKQ,UAAWX,EAAQb,OACtB,yCACA,2BACEyB,YAAab,EAAMc,KAAKA,KACxBC,MAAOV,EACPW,SAAU,SAACC,GAAD,OAAWX,EAASW,EAAMC,OAAOH,UAE7C,kBAACI,EAAA,EAAD,CAAQC,QAxBG,WACjB/C,EAAGgD,WAAW,SAASC,IAAItB,EAAMc,KAAKS,IAAIC,IACxC,CACEV,KAAMT,GAER,CAAEoB,OAAO,IAEXrB,GAAQ,IAiB2BsB,UAAWrB,GAAxC,iBAKJ,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcC,QAAS/B,EAAMc,KAAKA,KAAMkB,UAAU,eAGtD,kBAAC,IAAD,CAAUxB,MAAO,CAAEC,MAAO,WAAaW,QAAS,SAACT,GAAD,OAAOP,GAAQ,MAC/D,kBAAC,IAAD,CACEI,MAAO,CAAEC,MAAO,WAChBW,QAAS,SAACH,GAAD,OACP5C,EAAGgD,WAAW,SAASC,IAAItB,EAAMc,KAAKS,IAAIU,eCVvCC,MA5Df,WAAe,MAEahC,mBAAS,IAFtB,mBAENiC,EAFM,KAECC,EAFD,OAIalC,mBAAS,IAJtB,mBAING,EAJM,KAICC,EAJD,KA6Bb,OAvBA+B,qBAAU,WACRhE,EAAGgD,WAAW,SACXiB,QAAQ,YAAa,QACrBC,YAAW,SAACC,GACXJ,EACEI,EAASC,KAAKC,KAAI,SAACpB,GAAD,MAAU,CAAEC,GAAID,EAAIC,GAAIT,KAAMQ,EAAIqB,OAAO7B,eAGhE,IAgBD,yBAAKF,UAAU,OACb,wBAAIJ,MAAO,CAAEC,MAAO,YAApB,aACA,8BACE,kBAACmC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,yBACA,kBAACC,EAAA,EAAD,CACE/B,MAAOV,EACPW,SAAU,SAACC,GAAD,OAAWX,EAASW,EAAMC,OAAOH,WAG/C,kBAACI,EAAA,EAAD,CACEO,UAAWrB,EACX0C,KAAK,SACL3B,QA1BQ,SAACH,GACfA,EAAM+B,iBAGN3E,EAAGgD,WAAW,SAAS4B,IAAI,CACzBnC,KAAMT,EACN6C,UAAW5E,IAASU,UAAUmE,WAAWC,oBAG3C9C,EAAS,KAkBH+C,QAAQ,YACR5C,MAAM,WALR,aAWF,wBAAID,MAAO,CAAEC,MAAO,YACjB0B,EAAMO,KAAI,SAAC5B,GAAD,OACT,kBAAC,EAAD,CAAMA,KAAMA,UCjDFwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.06cb8809.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyBg8JxOjiudd6AJ9txUeDe9XOlGKu9C8Bc\",\r\n  authDomain: \"todo-list-app-7929a.firebaseapp.com\",\r\n  databaseURL: \"https://todo-list-app-7929a.firebaseio.com\",\r\n  projectId: \"todo-list-app-7929a\",\r\n  storageBucket: \"todo-list-app-7929a.appspot.com\",\r\n  messagingSenderId: \"23894226236\",\r\n  appId: \"1:23894226236:web:49613e6d9388228bc35a39\",\r\n  measurementId: \"G-JQ0JE18YQD\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport { db };\r\n","import React, { useState } from \"react\";\r\nimport \"./Todo.css\";\r\nimport { db } from \"./firebase\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Button,\r\n  Modal,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction Todo(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [input, setInput] = useState();\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const updateTodo = () => {\r\n    db.collection(\"todos\").doc(props.todo.id).set(\r\n      {\r\n        todo: input,\r\n      },\r\n      { merge: true }\r\n    );\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        style={{ color: \"#3f51b5\" }}\r\n        open={open}\r\n        onClose={(e) => setOpen(false)}\r\n      >\r\n        <div className={classes.paper}>\r\n          <h1>Edit Todo</h1>\r\n          <input\r\n            placeholder={props.todo.todo}\r\n            value={input}\r\n            onChange={(event) => setInput(event.target.value)}\r\n          />\r\n          <Button onClick={updateTodo} disabled={!input}>\r\n            Update Todo\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <List>\r\n        <ListItem>\r\n          <ListItemAvatar>\r\n            <ListItemText primary={props.todo.todo} secondary=\"Not Done\" />\r\n          </ListItemAvatar>\r\n        </ListItem>\r\n        <EditIcon style={{ color: \"#3f51b5\" }} onClick={(e) => setOpen(true)} />\r\n        <DeleteIcon\r\n          style={{ color: \"#3f51b5\" }}\r\n          onClick={(event) =>\r\n            db.collection(\"todos\").doc(props.todo.id).delete()\r\n          }\r\n        />\r\n      </List>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Button, FormControl, Input, InputLabel } from \"@material-ui/core\";\nimport Todo from \"./Todo\";\nimport { db } from \"./firebase\";\nimport firebase from \"firebase\";\n\n//main function\nfunction App() {\n  //local list if todos\n  const [todos, setTodos] = useState([]);\n  //clears the input field\n  const [input, setInput] = useState(\"\");\n\n  useEffect(() => {\n    db.collection(\"todos\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setTodos(\n          snapshot.docs.map((doc) => ({ id: doc.id, todo: doc.data().todo }))\n        );\n      });\n  }, []);\n\n  //function that adds a todo and then clears the input field\n  const addTodo = (event) => {\n    event.preventDefault();\n    //... means all of the items in the list/ spreads out the items in the list\n\n    db.collection(\"todos\").add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n\n    setInput(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 style={{ color: \"#3f51b5\" }}>Todo List</h1>\n      <form>\n        <FormControl>\n          <InputLabel>Write Todo Here:</InputLabel>\n          <Input\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n        </FormControl>\n        <Button\n          disabled={!input}\n          type=\"submit\"\n          onClick={addTodo}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Add ToDo\n        </Button>\n      </form>\n\n      <ul style={{ color: \"#3f51b5\" }}>\n        {todos.map((todo) => (\n          <Todo todo={todo} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}